generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Me {
  id          Int      @id
  name        String
  lastname    String
  phone       String
  email       String
  description String
  city        String
  country     String
  updatedAt   DateTime @updatedAt
}

model Social {
  id        Int      @id @default(autoincrement())
  name      String
  icon      String
  url       String
  state     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Institution {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?
  url            String?
  city           String?
  country        String?
  state          Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  teachings      Education[]
  achievements   Achievement[]
  languages      Language[]
  workExperience WorkExperience[]
  knowledges     Knowledge[]
}

model Education {
  id            Int         @id @default(autoincrement())
  institutionId Int
  grade         String
  startDate     DateTime    @db.Date
  finishDate    DateTime?   @db.Date
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  institution   Institution @relation(fields: [institutionId], references: [id])
}

model Achievement {
  id            Int         @id @default(autoincrement())
  name          String
  institutionId Int
  institution   Institution @relation(fields: [institutionId], references: [id])
  date          DateTime    @db.Date
  url           String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Language {
  id            Int          @id @default(autoincrement())
  name          String
  institutionId Int?
  institution   Institution? @relation(fields: [institutionId], references: [id])
  native        Boolean      @default(false)
  level         Int
  startDate     DateTime?    @db.Date
  finishDate    DateTime?    @db.Date
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Skill {
  id        Int      @id @default(autoincrement())
  name      String
  level     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SoftSkill {
  id        Int      @id @default(autoincrement())
  name      String
  level     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkExperience {
  id            Int         @id @default(autoincrement())
  institutionId Int
  institution   Institution @relation(fields: [institutionId], references: [id])
  position      String
  startDate     DateTime    @db.Date
  finishDate    DateTime?   @db.Date
  description   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model KnowledgeCategory {
  id          Int         @id @default(autoincrement())
  name        String
  slug        String
  description String
  icon        String
  preference  Int
  state       Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  knowledges  Knowledge[]
}

model Knowledge {
  id             Int               @id @default(autoincrement())
  name           String
  description    String
  slug           String
  color          String            @default("gray")
  categoryId     Int
  icon           String?
  level          Int               @default(1)
  institutionId  Int?
  certificateURL String?
  state          Boolean           @default(true)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  category       KnowledgeCategory @relation(fields: [categoryId], references: [id])
  institution    Institution?      @relation(fields: [institutionId], references: [id])
  projects       Project[]
}

model Project {
  id            Int         @id @default(autoincrement())
  name          String
  slug          String      @unique
  imageURLs     String[]
  tags          Knowledge[]
  description   String
  repositoryURL String?
  state         Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
